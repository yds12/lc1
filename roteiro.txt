# Exercício 1

1. Parsear as árvores dadas no corpus e armazená-las em memória.

2. Sortear uma fração dessas árvores para treino e teste.

3. Extrair uma gramática a partir das representações das árvores.

4. Criar um analisador sintático que use o algoritmo de Earley e recebe como entrada uma gramática e uma sentença, retornando as árvores correspondentes caso a sentença seja reconhecida.

5. Criar um script testador que permita rodar o experimento repetidamente, usando uma parte do corpus para gerar a gramática e outra parte para testar as sentenças.

6. Medir a precisão e a cobertura em cada experimento.

## Dificuldades

1. Antes de adicionar as regras na gramática, ela deve ser checada para ver se já existe. Para evitar problemas de performance percorrendo listas, usei a estrutura de dados Set.

2. No algoritmo de Earley, no Predictor, para buscar as regras com um dado Head, foi criado um hash mapeando os heads para as regras, para evitar lentidão.

3. Recursão infinita sendo causada por regras do tipo X ::= X, ou pares do tipo X ::= Y e Y ::= X. Discussão em http://www1.icsi.berkeley.edu/~stolcke/papers/cl95/node20.html. Primeiro caso pode ser resolvido eliminando essas regras, pois são inúteis. O segundo caso é mais complicado, pois não podemos saber qual regra eliminar. Nesse caso, como estados  repetidos não são adicionados, resolve-se esse problema.

4. Não adicionar estados repetidos gera mais uma dificuldade: como representar então todas as possíveis árvores de derivação? A solução que encontrei foi apenas adicionar os ponteiros gerados pelo Completer no estado já existente (no entanto, as infinitas árvores geradas pela recursão não serão representadas, mesmo sendo possíveis, o que pode ser um problema).

5. Gerar todas as árvores de parsing para uma sentença parece inviável. Para frase com 5 palavras mais de 400 mil árvores foram geradas.

6. Codificação de caracteres padrão português conflitando com UTF-8 (padrão do Ruby).

7. As árvores com regras do tipo X := X não estavam sendo aceitas, pois as regras estão sendo eliminadas.

# Exercício 2

1. Extrair uma gramática livre de contexto probabilística a partir das representações das árvores.

2. Alterar o analisador sintático de forma que ele compute a árvore mais provável apenas. Usar o algoritmo de Viterbi (cada regra expandida tem probabilidade equivalente a probabilidade da regra mais a probabilidade acumulada dos seus sub-constituintes ou sub-árvores).

3. Calcular a precisão, cobertura e medida F, considerando que a precisão pode ser total ou de parentetização.
